		***编程心得***
2014-05-06	--->

	真的是这样, 可能你在某个地方看的一句不经意的话, 却悄悄地打开了你心中某个神秘的所在, 唤醒了潜伏很久的能力, 
	然后开始创造奇迹, 仅仅从一个点开始, 不断潜入问题的深处, 层层剥离迷惑的外衣, 揭开刚开始时若即若离的支离破碎
	地幻象.
	
	我当时确定自己用 反射 重写一个类的 toString 方法,虽然搁浅一段时间, 后来却坚持把它做完了.
	就像我在查 java 基础知识 三类八种 时, 为了确定这个体系里的所有基础类型, 然后想到如何区分它们与用户自定义的类
	不经意间看到一篇很有用的博文, 在里面受到很大的启发, 然后自己不断修正思路代码, 最终完美完成任务.
		
		
2014-05-04	--->
	
	稍稍感觉到了迭代开发的魅力了 -- 层层递进, 步步为营, 反复琢磨, 再三重构, 不断雕琢, 去繁取精, 排除不合理的节点, 寻找更优化的
	解决方案, 从一闪而逝的狭缝中捕获住某个轻易被丢失的条件分枝, 往往被推倒重来所付出的时间成本而揪心, 又不禁为浴火重生后的刹那
	辉煌所震撼
	
	调试的时候, 不能那么盲目的, 很多情况下都不知道自己行为的意义, 其实在浪费精力和时间

	include, exclude 这些字符是系统保留字，不允许使用，我当作变量或者是JSONArray,JSONObject的key传值时报异常了
		
2014-04-28	--->

	jquery-ui-1.8.14.custom.min.js
	jquery.multiselect.filter.min.js
	
	这两个 js 如果有冲突，filter 的功能无法使用，即要提醒自己有些时候由于 Js 的冲突导致的问题应该想到。
		
		
2014-04-17	--->

	用数学语言或符号或逻辑来描述思考相关问题，得到的解又将会是另外一种奇妙的情况

	判断一个对象的类型，分以下几步：
		
		1 object instanceof String
		2 Number
		3 Boolean
		4 Character
		5 null
		
2014-04-16	--->

	【制造矛盾，连锁反应，当问题趋于不明朗隐晦时，这种方式也可从另一个角度把问题弄明白。】

	自己有个毛病，发现别人的问题十分迅速，解决别人的问题也十分给力，轮到自己的程序报bug了，死活搞不定，或者需要消耗
	很久才能给出个思路。
	
	告诉别人的问题时，要记住尽可能详尽，带有你测试的上下文环境。不然别人不好调试重现。
	
	再复杂的程序也不可能是杂乱无章的，写这段代码或程序的人，一定有个清晰的宏观思路划分，即拆分成碎片式，片断式，然后有条隐形而牢固的线条
	把这些所有逻辑都串连起来，而自己所需要做的工作就是先找这个线条，理清各个层次之间的关系，也可以从不同的层次去窥探那条线。这条线很重要
	的，不然，你自己很容易就乱掉，在浪费时间中迷失自己。无功而返，还得从头再来的悲剧命运。
	
	html 里面的布局模块化最容易理解
		
2014-04-11	--->

	写一个方法, 打印出某个类的所有信息.就是重写 toString 方法的功能.因为有些类没有重写这个方法.
		
		
2014-04-10	--->

	1	为什么自己有了大致的想法,即使是模糊的,可还是左右徘徊,犹豫不决呢,这种拖延慢性症状,其实可以从源头上进行隔离扼止的.
		
		
2014-03-18	--->

	1	对于js中的函数，初始化之后，总有一个调用的入口，或者是一个构造函数，或者是某个事件的触发，或者是在某个已经执行的函数内部被调用了。
		这一切都是根据你的业务逻辑和代码处理流程的需要。不一定是在某个明显的地方被调用。
	2	有些被调用的函数在引入的js库里没有找到，很有可能是被重新封装了一次，放在别的js库里，一些需要改进的功能。添加自己业务逻辑处理的地方。
	3	对jquery里的一些常用方法又有一层新的认识，$.getJson(),$.slice(),$.live(),$.append(),$.appendTo(),$.inArray(),$.trim() 等等
	4	前端js库，越来越像后台那样的依赖于某些开发思想或设计模式，命名空间，MVC等等。
		
2014-03-11	--->

	URI:Uniform Resource Identifier
	URL:Uniform Resource Locator
	
	文档需要反复读,读多了,许多新鲜的意思及更新会蹦出来,挺有趣了
		
2014-03-04	--->

	Things I have learned about Programming
	1.	That computers are really dumb they only do what you tell it to do.
	2. 	It's very hard.(you have to be very careful).
	3.	What you tell it to do has to be in the right order.
	4.	You can do many different things with a computer.
	5.	You always have to check your work.
	
	计算机很傻，它只会那些你让它做的事。
	编程真的很难。（你必须非常的认真）
	你告诉它去做事情时必须按照正确的顺序。
	你可以用计算机做出很多不同的事情。
	一定要检查你的工作。
	
	----- 以上这些编程心得是一个开始接触编程的小女孩写的 !
	
	
2014-02-25	--->

	编写代码时有个流程，最起始的时候，亚根儿就是错误的，或者是有瑕疵的，导致你在某个误区内行走甚至奔驰;
	此时，能够扼制事态继续恶化的一个动作就是，你去测试，调试你的代码。参考标准是，文档需求说明，同事工作交叉部分，常识。
	把这个流程推向另外一条轨道上来，也许和其它流程就交织到一块儿来了。
	
	前面的这个流程如果是结构良好的，精心设计，比如说是某个设计模式，流程常识（或许我应该好好学学这些，控制论？）
	
	大致我使用了这样一个思路，【先拆分中间处理最后整合】（整合之后的结果集有需要再次分拆出来，各归其位）
	
	所以在处理excel时，自己运用这个整体意识去组织（弱弱的架构）了一次自己的代码编写流程。效果十分明显。
	
	果不其然，结构优雅，简单，高效的设计，对于后来的需求变动，也能顶住压力。弹性十足。伸缩有余。
	
	重新整理，变通对应，左右反证，定得正解。
	
2014-01-16	--->
			
	坚持完善 https://github.com/yangsong19 自己的代码库
		
2014-01-08	--->

	今天借助同事的帮助，把那个犯二儿的错误给纠正了。这个需求是这样的，把一个 excel 文件通过 ajax 的一个插件给上传后解析,这里面包含两个动作，
	其一是：选择excel文件,有个 id 号;
	其二是：通过 $.ajaxFileUpload 进行上传。
	此外还有一个上下文环境是，有个 Bulk Update 的按钮可供点击触发事件。我就这样干了，在点击这个按钮的函数内来触发选择文件的动作，可是我
	还没有选中文件确定，后面的代码已经执行了。我当时一直陷入在来个异步操作的解决方案，可是宣告失败。就把这两个操作完全分离开，必须先选中
	文件，才能点击 Bulk Update ！反过来的思路是这样的，<input type="file" name="bulkupdate" id="bulkupdate" class="inputstyle" onchange="return uploadExcel();">Bulk Update</input>
	注意不是 onclick 事件，这样点击之后才会触发 $.ajaxFileUpload 这段代码的执行！按：【is 'onchange' not 'onclick' event】
	
	一切事情，只要你愿意有意识地反过来再思考一遍，将会有很多种新奇的甚至是颠覆性的方案思路出现，重新审视这个问题！可我一旦陷入困境，会一直
	走不出来，去死抠，导致心里毛躁躁地，其实已经在错误的道路上行走了，但就是没有反省的，重新审视的意识和能力。这也是为什么李连杰要用阴阳的
	思考方式来生活，这样很容易就豁然开朗了！
	
	这其实有点儿是环境对人造成的一种误导，或者是人自己在某种环境下的一种先入为主的感觉。

		
2013-12-19	--->
1	每个人都有思维惯性，这或许就是一种隐性的陷阱，这样说是建立在一个陌生的氛围，新的情况出现时，很有可能就被引向事物正确面的反向；
	也或许是一种隐性的福利，因为你多了一层思考的空间，多了一种选择的余地，更容易开启局面。
	无论是你在预设好的轨道上行走，还是一无所知的探索阶段，大胆的尝试，多考虑可能的新情况，新选择，新方向，才是关键
	反思可以获得力量 改变可以赢得未来 一味墨守成规安于现状 就等于苟且偷生自寻死路 脚踏实地行走在路上 挫败跌倒之后趴起来
		
2013-11-27	--->
String sql =//to be stored in String array in CMCD
			"SELECT description, source, duration, flags&1, url, iconUrl, pageurl, hiresurl, youtube_streaming_url, flags>>1&1, ext_varchar_5, (select content_partner_id FROM contentProvider WHERE contentId=?), " +
			//stored as other datatype/not store at all in CMCD  
			"(select count(comment2.commentId) FROM comment2 WHERE contentId=?), (select count(*) FROM rating WHERE contentId=?),insertDate FROM content WHERE contentId=?";		
		
2013-11-14	--->
1	每次自己遇到问题时，也仅仅满足于遇到问题，发现问题而已，从来没有主动去思考如何给出解决方案，即所谓的自主探究，分析问题的能力极差！！！
	今天遇到的问题是这样的：有个需求，要把某个 channelId 为 ver-10 的 channel 的 title 给修改一下，以前有个工具 create channel on pcc 可以完成相应功能。但是之前做的有个缺陷
	却一直没有发现，涉及三张表 channel pcc_channel pcc_feed ，以前的联合查询条件是这样的
	select pc.channel_id,c.title,f.url,f.source_name,f.feed_id from pcc_feed  f, pcc_channel pc, channel c where f.feed_id=pc.feed_id and c.channelId=concat('pcc-',pc.channel_id) order by pc.channel_id desc		
	其中 c.channelId=concat('pcc-',pc.channel_id) 即按 channelId 来进行联合查询的条件，这样有些 channel 表里的 channelId 不符合 pcc-123 这种形式的就查不出来了，故需要修改成下面：
	select c.channelId, pc.channel_id,c.title,f.url,f.source_name,f.feed_id from pcc_feed  f, pcc_channel pc, channel c where f.feed_id=pc.feed_id and substr(c.base,5)=pc.channel_id order by pc.channel_id desc
	这里面充分用到了 channel 表里的一个备用字段  base ，记录了 pcc_channel 表里的 channel_id 信息，这样就把问题解决了，也即是修改一下 sql 语句的查询条件而已。
		
		
2013-11-13	--->
1	当程序中有些地方出错了，搞不定时，还有一种不错的参考思路，那就是去查相应的API，甚至是原代码。别一出错，就急了，手忙脚乱的样子。错误，都有一个源头，找出来，然后对症下药，
	大多数时候都可以解决的。
2	jspsmart.jar用来上传文件用的一个小工具，但是会有乱码的问题，该如何解决呢。其中就可以修改原代码中的upload方法，在字符串编码时加上“utf-8”
3	【context】这个术语解读为“上下文”，如果在开发或者是做事时对这个概念，有一个清醒的认识，无疑将会起到事半功倍的作用。很多情况下，我们都忽略某个变量或对象或容器或组件或技术
	或思想或方法或代码所处的“上下文”，导致周围环境变化了，我们都不知道，都没有意识到，还在原来自以为是的环境下进行某种操作或思考。最经典的例子就是，当时在用bootstrap这个前端
	css工具，用javascript控制一个带有小叉的div的显隐时，出现一些莫名其妙的问题。原来是我们若点击了上面自带的小叉时，bootstrap内部处理机制是把这个div直接给从页面移除了，而不是
	设置其display=none！不过还有一种情况是，我们自己受限于自己的专业能力，在很多问题上由于没有深入全面研究，处于一知半解的状态，也很难会考虑某些异常情况。不断提升各种能力，就
	显得更重要。然而，脑袋里的一些正确意识，却毫无疑问地可以帮助我们少走很多弯路。
		
2013-11-06	--->
1	JavaScript 中的每个变量都会绑定到一个对象身上，即所谓这个变量的作用域 scope ，这是通过 var 关键字定义时确定的。当然也有一些情况，比如对象 {} 内部的变量，可以不用 var 
	显式的声明等。
		
2013-11-05	--->
1	C:\WINDOWS\system32\drivers\etc\hosts 系统host文件位置		
2	【要想把学到的知识变成自己的东西，中间必须经过反复地思考总结，验证，使用。别无它法。】
3	a 通过这个例子，我来总结一下自己的感受：其实，prototype,这个关键字，就像是 java 里面的 extends 关键字吧，JavaScript 里面虽然没有规范中这种类对象的继承机制，而 prototype 无疑
	  是在朝这个方面靠拢，追求那个类对象世界里的真正 extends 机制，以达到那个效果。所以，JavaScript 里面要用一种面向对象的思维来学习。可以来建立一系列明晰的概念和经验，让这两种
	  语言相通，以达到减负，不是各自独立，今天记住明天又忘，重新再来的成本问题。知识就是一个通则活的过程。当然二者也有明显的区别，不能死搬硬套。独立思考。
	b 以前自己学习到的都零散的知识碎片，而现在有能力再进一步，朝向系统性，整体性探究，花费大量的时间精力来完成这样一件事情，也是迫在眉睫。
	c 比如说 Java 里好的思想，已经成熟的解决方案，在 JavaScript 中都是可以尝试进行，改造以前的冗长无规则，重写简洁，有层次，结构性强，语义明晰，组织明了的代码，无论是重用及测试
	  不至于开销太大。不同的阶段，都需要解决不同层次问题，总之，要向更清晰，更规范，更整体，更逻辑，更系统的方向努力。
4	在没有使用Myeclipse这些工具修改类，而是使用editplus等时，会导致一些com.xinlab.blueapple.VuclipWebUtil 这样的引用类没有导进来，导致编译错误，
	  
2013-10-30	--->
1	事无巨细，身必躬亲，这不是总理范儿吗
2	念高危，则思谦冲而自牧。谦冲：谦虚谨慎，自我控制。自牧：指自我调养，自我修养。
3	【var $this = $(this);】   ******这个操作很重要，就是把一个 DOM element 转化成了一个 jQuery 对象！！！******今天最为重大的收获  ------进而产生的重大连带效应如下
4	反射就是把 java 类中的各种成分映射成相应的 java 类	
		
2013-10-28	--->
1	javascript 及 jQuery 的学习，应该以 java 的面向对象的思维来进行：
	对象来封装数据结构, 组织数据; getter and setter; chainning;像那种在页面中惟一存在的元素id,name; 或者是固定的标签div,h1,p,span,tr等,通过选择器很容易定位到。
	DOM 操作时的性能问题，能一次性全部添加的，不要一步步添加。
2	所以学习一门新的编程语言或技能，我们不能越学越多，而是越学越精简; 这似乎是又回归到原点上去了，这就对了。试想，一门新的理论，不可能像我们刚接触时感觉到的那么杂乱无章，
	而是有内在的方法论或者已经定型的逻辑程式的，否则那套理论不可能运行如此顺畅。我们的任务无非就是用这个意识来剥离掉自己的自我偏见并从某个点上进去之后，去找到它的运行机理，
	以辅正我们的思路和观念，时间或长或短，坚持去反复一二三，或许思绪越来越清晰呢。
3	系统性思维之我观 -- 比如我改了某个 css 属性之后，却没有意识到其产生的连带效应，导致后面出现了反常的现象	。但是却苦于找不到原因，如果自己能够把每一操作的连带效应考虑进去
	之后，再来一个把控，是不是更多了一份从容和淡定。一个系统内，虽然是微型的系统，但从来没有注意到的问题有很多，我考虑问题从来只是局限于某个点，搞完了从来不多加思考和拓展。
4	有时候很重要的是，要学会向内看，无不是一直往外看。所谓内视，自省吧	
	
2013-10-24	--->
1	当在编程中当遇到涉及某个知识点解决不了时，一定要保留一点儿意识，即回归这个知识点儿本来面目，是不是真正建立在对这个知识点儿的正确认识之上，大多数时候，我们都
	游离在这个知识点儿本来面目之外，无意识的在按我们自己的所谓正确主张在进行理解。然而一旦出现问题，你就会找不到出路了，困惑了。。。
2013-10-23	--->
1	少量原则，极简原理		或许这个更能激发你的斗志，给你别样的感觉
	我吃饭的时候能不能少吃点儿，留有余地 -- 这个教会我不要贪婪，要节俭，不要好面子，专吃贵的，高档的;我编程时，代码能不能少写点儿，精简一些 -- 这个都会我要重构自己的
	代码，抽成公用方法，接口，有没有可用的编程模式可以解决那种笨拙的思路。
		
2013-10-22	--->
1	自己学习了一些新知识，为什么不想方设法的在项目中运用，而是抱着旧知识一路走到底，长期未见任何长进？？？
	运用学习到的新知识的这种意识或这份敏感，将是你独立思考，长期进步的动力和源泉！！！比如，我现在学习了一些关于javascript的this全面知识，能不能运用到自己的项目中，
	把代码质量提升一个档次，给人一种全新的感觉呢？？？不是做不到，是亚根儿，你就不想着去做，不想着改变。改变其实很简单，只要去尝试，出错了，也是一种经验。。。时间久
	了，你就会发现一套自动纠错的机制和套路。不要固步自封！！！
2	别人的东西，你不经过消化吸收转化成自己的东西，就永远不是你自己的东西，永远是别人的东西
	有个方法可以尝试：勤做笔记，多反思，常总结

		
2013-10-21	--->
	北京尚学堂视频教程下载地址      http://www.bjsxt.com/shipinxiazai/
	私塾视频教程下载地址            http://sishuok.com/
	传智博客视频教程下载地址        http://www.itcast.cn/channel/video.shtml
	张孝详视频教程下载地址          http://www.verycd.com/topics/239368/
	
2013-10-16	--->
2	http://learn.jquery.com/events/event-delegation/ JQuery学习网站 

1	开发框架 --> 以下是iteye上一些大牛对于框架的一些构思及尝试

	【Guice】+【Velocity】+【DBUtil】	-->  dbutil - apache
	【Spring MVC】+【Spring core】+【Spring jdbc】  -->	 #springrain#   http://www.oschina.net/p/springrain
	【Smart Framework】	http://my.oschina.net/huangyong/blog?disp=3&catalog=386891&p=1
	【JFinal】	http://my.oschina.net/jfinal
		
		
2013-10-15	--->
1	What(做什么内容)、Who（执行者）、When（时间要求）、Way（方法策略）、Worth（结果与价值）
	当自己没有思路时，这个思考工作流程会起到很大的作用。
	
	
2013-10-12	--->		
1	接口就是用来实现某个具体功能的的统一访问点。具体实现类，你要是有这种需求了，你实现我就ok		
2	TheadLocal类里的那个get方法，一小段代码，却暗藏杀机，真是不能觉得自己看一遍就什么原理都懂了，就能实现一个了。这中间还有很远的距离呢！！！这段代码的逻辑相当完整，自证。
	就像刚开始学骑单车的小孩，大人告诉他怎么上车，怎么控制把手，他觉得这个还不简单！但是当一辆自行车真正摆在他面前时，在没有人搀扶的情况下，却十有八九会摔倒。
	借以告诫自己，事必躬亲，操手实践，才能验证一二。
3	似乎有这样的感觉了，java编程中，即面向对象思维，对象是从具有完整内部细节的实体高度抽象出来的一个整体，无非是这样，它封装了各种内部细节及动作的整体，记住：这是一个完整的
	结构或者是容器，只不过内部是通过一系列隐秘的机制互联起来的。我想说的是，带来的一个明显的好处是，你有一种把握住它的冲动了。
4	MyEclipse java debug:F5进入方法内部;F6下一步
